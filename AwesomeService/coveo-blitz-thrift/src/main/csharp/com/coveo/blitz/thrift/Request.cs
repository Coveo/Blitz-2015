/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace com.coveo.blitz.thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Request : TBase
  {
    private List<string> _dimensions;
    private List<string> _metrics;
    private List<DimensionFilter> _filters;
    private List<Sort> _sorts;

    public List<string> Dimensions
    {
      get
      {
        return _dimensions;
      }
      set
      {
        __isset.dimensions = true;
        this._dimensions = value;
      }
    }

    public List<string> Metrics
    {
      get
      {
        return _metrics;
      }
      set
      {
        __isset.metrics = true;
        this._metrics = value;
      }
    }

    public List<DimensionFilter> Filters
    {
      get
      {
        return _filters;
      }
      set
      {
        __isset.filters = true;
        this._filters = value;
      }
    }

    public List<Sort> Sorts
    {
      get
      {
        return _sorts;
      }
      set
      {
        __isset.sorts = true;
        this._sorts = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool dimensions;
      public bool metrics;
      public bool filters;
      public bool sorts;
    }

    public Request() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Dimensions = new List<string>();
                TList _list14 = iprot.ReadListBegin();
                for( int _i15 = 0; _i15 < _list14.Count; ++_i15)
                {
                  string _elem16;
                  _elem16 = iprot.ReadString();
                  Dimensions.Add(_elem16);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Metrics = new List<string>();
                TList _list17 = iprot.ReadListBegin();
                for( int _i18 = 0; _i18 < _list17.Count; ++_i18)
                {
                  string _elem19;
                  _elem19 = iprot.ReadString();
                  Metrics.Add(_elem19);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Filters = new List<DimensionFilter>();
                TList _list20 = iprot.ReadListBegin();
                for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                {
                  DimensionFilter _elem22;
                  _elem22 = new DimensionFilter();
                  _elem22.Read(iprot);
                  Filters.Add(_elem22);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                Sorts = new List<Sort>();
                TList _list23 = iprot.ReadListBegin();
                for( int _i24 = 0; _i24 < _list23.Count; ++_i24)
                {
                  Sort _elem25;
                  _elem25 = new Sort();
                  _elem25.Read(iprot);
                  Sorts.Add(_elem25);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Request");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Dimensions != null && __isset.dimensions) {
        field.Name = "dimensions";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Dimensions.Count));
          foreach (string _iter26 in Dimensions)
          {
            oprot.WriteString(_iter26);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Metrics != null && __isset.metrics) {
        field.Name = "metrics";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Metrics.Count));
          foreach (string _iter27 in Metrics)
          {
            oprot.WriteString(_iter27);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Filters != null && __isset.filters) {
        field.Name = "filters";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Filters.Count));
          foreach (DimensionFilter _iter28 in Filters)
          {
            _iter28.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Sorts != null && __isset.sorts) {
        field.Name = "sorts";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Sorts.Count));
          foreach (Sort _iter29 in Sorts)
          {
            _iter29.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Request(");
      bool __first = true;
      if (Dimensions != null && __isset.dimensions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Dimensions: ");
        __sb.Append(Dimensions);
      }
      if (Metrics != null && __isset.metrics) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Metrics: ");
        __sb.Append(Metrics);
      }
      if (Filters != null && __isset.filters) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Filters: ");
        __sb.Append(Filters);
      }
      if (Sorts != null && __isset.sorts) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sorts: ");
        __sb.Append(Sorts);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
