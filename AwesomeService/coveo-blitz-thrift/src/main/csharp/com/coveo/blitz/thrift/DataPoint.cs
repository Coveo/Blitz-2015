/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace com.coveo.blitz.thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DataPoint : TBase
  {
    private Dictionary<string, string> _dimensions;
    private Dictionary<string, long> _metrics;

    public Dictionary<string, string> Dimensions
    {
      get
      {
        return _dimensions;
      }
      set
      {
        __isset.dimensions = true;
        this._dimensions = value;
      }
    }

    public Dictionary<string, long> Metrics
    {
      get
      {
        return _metrics;
      }
      set
      {
        __isset.metrics = true;
        this._metrics = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool dimensions;
      public bool metrics;
    }

    public DataPoint() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                Dimensions = new Dictionary<string, string>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  string _key2;
                  string _val3;
                  _key2 = iprot.ReadString();
                  _val3 = iprot.ReadString();
                  Dimensions[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                Metrics = new Dictionary<string, long>();
                TMap _map4 = iprot.ReadMapBegin();
                for( int _i5 = 0; _i5 < _map4.Count; ++_i5)
                {
                  string _key6;
                  long _val7;
                  _key6 = iprot.ReadString();
                  _val7 = iprot.ReadI64();
                  Metrics[_key6] = _val7;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DataPoint");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Dimensions != null && __isset.dimensions) {
        field.Name = "dimensions";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Dimensions.Count));
          foreach (string _iter8 in Dimensions.Keys)
          {
            oprot.WriteString(_iter8);
            oprot.WriteString(Dimensions[_iter8]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Metrics != null && __isset.metrics) {
        field.Name = "metrics";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Metrics.Count));
          foreach (string _iter9 in Metrics.Keys)
          {
            oprot.WriteString(_iter9);
            oprot.WriteI64(Metrics[_iter9]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DataPoint(");
      bool __first = true;
      if (Dimensions != null && __isset.dimensions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Dimensions: ");
        __sb.Append(Dimensions);
      }
      if (Metrics != null && __isset.metrics) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Metrics: ");
        __sb.Append(Metrics);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
