/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.coveo.blitz.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-1-9")
public class Request implements org.apache.thrift.TBase<Request, Request._Fields>, java.io.Serializable, Cloneable, Comparable<Request> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Request");

  private static final org.apache.thrift.protocol.TField DIMENSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("dimensions", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField METRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("metrics", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField FILTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("filters", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SORTS_FIELD_DESC = new org.apache.thrift.protocol.TField("sorts", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RequestTupleSchemeFactory());
  }

  public List<String> dimensions; // required
  public List<String> metrics; // required
  public List<DimensionFilter> filters; // required
  public List<Sort> sorts; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DIMENSIONS((short)1, "dimensions"),
    METRICS((short)2, "metrics"),
    FILTERS((short)3, "filters"),
    SORTS((short)4, "sorts");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DIMENSIONS
          return DIMENSIONS;
        case 2: // METRICS
          return METRICS;
        case 3: // FILTERS
          return FILTERS;
        case 4: // SORTS
          return SORTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DIMENSIONS, new org.apache.thrift.meta_data.FieldMetaData("dimensions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.METRICS, new org.apache.thrift.meta_data.FieldMetaData("metrics", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FILTERS, new org.apache.thrift.meta_data.FieldMetaData("filters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DimensionFilter.class))));
    tmpMap.put(_Fields.SORTS, new org.apache.thrift.meta_data.FieldMetaData("sorts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Sort.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Request.class, metaDataMap);
  }

  public Request() {
  }

  public Request(
    List<String> dimensions,
    List<String> metrics,
    List<DimensionFilter> filters,
    List<Sort> sorts)
  {
    this();
    this.dimensions = dimensions;
    this.metrics = metrics;
    this.filters = filters;
    this.sorts = sorts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Request(Request other) {
    if (other.isSetDimensions()) {
      List<String> __this__dimensions = new ArrayList<String>(other.dimensions);
      this.dimensions = __this__dimensions;
    }
    if (other.isSetMetrics()) {
      List<String> __this__metrics = new ArrayList<String>(other.metrics);
      this.metrics = __this__metrics;
    }
    if (other.isSetFilters()) {
      List<DimensionFilter> __this__filters = new ArrayList<DimensionFilter>(other.filters.size());
      for (DimensionFilter other_element : other.filters) {
        __this__filters.add(new DimensionFilter(other_element));
      }
      this.filters = __this__filters;
    }
    if (other.isSetSorts()) {
      List<Sort> __this__sorts = new ArrayList<Sort>(other.sorts.size());
      for (Sort other_element : other.sorts) {
        __this__sorts.add(new Sort(other_element));
      }
      this.sorts = __this__sorts;
    }
  }

  public Request deepCopy() {
    return new Request(this);
  }

  @Override
  public void clear() {
    this.dimensions = null;
    this.metrics = null;
    this.filters = null;
    this.sorts = null;
  }

  public int getDimensionsSize() {
    return (this.dimensions == null) ? 0 : this.dimensions.size();
  }

  public java.util.Iterator<String> getDimensionsIterator() {
    return (this.dimensions == null) ? null : this.dimensions.iterator();
  }

  public void addToDimensions(String elem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<String>();
    }
    this.dimensions.add(elem);
  }

  public List<String> getDimensions() {
    return this.dimensions;
  }

  public Request setDimensions(List<String> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public void unsetDimensions() {
    this.dimensions = null;
  }

  /** Returns true if field dimensions is set (has been assigned a value) and false otherwise */
  public boolean isSetDimensions() {
    return this.dimensions != null;
  }

  public void setDimensionsIsSet(boolean value) {
    if (!value) {
      this.dimensions = null;
    }
  }

  public int getMetricsSize() {
    return (this.metrics == null) ? 0 : this.metrics.size();
  }

  public java.util.Iterator<String> getMetricsIterator() {
    return (this.metrics == null) ? null : this.metrics.iterator();
  }

  public void addToMetrics(String elem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<String>();
    }
    this.metrics.add(elem);
  }

  public List<String> getMetrics() {
    return this.metrics;
  }

  public Request setMetrics(List<String> metrics) {
    this.metrics = metrics;
    return this;
  }

  public void unsetMetrics() {
    this.metrics = null;
  }

  /** Returns true if field metrics is set (has been assigned a value) and false otherwise */
  public boolean isSetMetrics() {
    return this.metrics != null;
  }

  public void setMetricsIsSet(boolean value) {
    if (!value) {
      this.metrics = null;
    }
  }

  public int getFiltersSize() {
    return (this.filters == null) ? 0 : this.filters.size();
  }

  public java.util.Iterator<DimensionFilter> getFiltersIterator() {
    return (this.filters == null) ? null : this.filters.iterator();
  }

  public void addToFilters(DimensionFilter elem) {
    if (this.filters == null) {
      this.filters = new ArrayList<DimensionFilter>();
    }
    this.filters.add(elem);
  }

  public List<DimensionFilter> getFilters() {
    return this.filters;
  }

  public Request setFilters(List<DimensionFilter> filters) {
    this.filters = filters;
    return this;
  }

  public void unsetFilters() {
    this.filters = null;
  }

  /** Returns true if field filters is set (has been assigned a value) and false otherwise */
  public boolean isSetFilters() {
    return this.filters != null;
  }

  public void setFiltersIsSet(boolean value) {
    if (!value) {
      this.filters = null;
    }
  }

  public int getSortsSize() {
    return (this.sorts == null) ? 0 : this.sorts.size();
  }

  public java.util.Iterator<Sort> getSortsIterator() {
    return (this.sorts == null) ? null : this.sorts.iterator();
  }

  public void addToSorts(Sort elem) {
    if (this.sorts == null) {
      this.sorts = new ArrayList<Sort>();
    }
    this.sorts.add(elem);
  }

  public List<Sort> getSorts() {
    return this.sorts;
  }

  public Request setSorts(List<Sort> sorts) {
    this.sorts = sorts;
    return this;
  }

  public void unsetSorts() {
    this.sorts = null;
  }

  /** Returns true if field sorts is set (has been assigned a value) and false otherwise */
  public boolean isSetSorts() {
    return this.sorts != null;
  }

  public void setSortsIsSet(boolean value) {
    if (!value) {
      this.sorts = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DIMENSIONS:
      if (value == null) {
        unsetDimensions();
      } else {
        setDimensions((List<String>)value);
      }
      break;

    case METRICS:
      if (value == null) {
        unsetMetrics();
      } else {
        setMetrics((List<String>)value);
      }
      break;

    case FILTERS:
      if (value == null) {
        unsetFilters();
      } else {
        setFilters((List<DimensionFilter>)value);
      }
      break;

    case SORTS:
      if (value == null) {
        unsetSorts();
      } else {
        setSorts((List<Sort>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DIMENSIONS:
      return getDimensions();

    case METRICS:
      return getMetrics();

    case FILTERS:
      return getFilters();

    case SORTS:
      return getSorts();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DIMENSIONS:
      return isSetDimensions();
    case METRICS:
      return isSetMetrics();
    case FILTERS:
      return isSetFilters();
    case SORTS:
      return isSetSorts();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Request)
      return this.equals((Request)that);
    return false;
  }

  public boolean equals(Request that) {
    if (that == null)
      return false;

    boolean this_present_dimensions = true && this.isSetDimensions();
    boolean that_present_dimensions = true && that.isSetDimensions();
    if (this_present_dimensions || that_present_dimensions) {
      if (!(this_present_dimensions && that_present_dimensions))
        return false;
      if (!this.dimensions.equals(that.dimensions))
        return false;
    }

    boolean this_present_metrics = true && this.isSetMetrics();
    boolean that_present_metrics = true && that.isSetMetrics();
    if (this_present_metrics || that_present_metrics) {
      if (!(this_present_metrics && that_present_metrics))
        return false;
      if (!this.metrics.equals(that.metrics))
        return false;
    }

    boolean this_present_filters = true && this.isSetFilters();
    boolean that_present_filters = true && that.isSetFilters();
    if (this_present_filters || that_present_filters) {
      if (!(this_present_filters && that_present_filters))
        return false;
      if (!this.filters.equals(that.filters))
        return false;
    }

    boolean this_present_sorts = true && this.isSetSorts();
    boolean that_present_sorts = true && that.isSetSorts();
    if (this_present_sorts || that_present_sorts) {
      if (!(this_present_sorts && that_present_sorts))
        return false;
      if (!this.sorts.equals(that.sorts))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_dimensions = true && (isSetDimensions());
    list.add(present_dimensions);
    if (present_dimensions)
      list.add(dimensions);

    boolean present_metrics = true && (isSetMetrics());
    list.add(present_metrics);
    if (present_metrics)
      list.add(metrics);

    boolean present_filters = true && (isSetFilters());
    list.add(present_filters);
    if (present_filters)
      list.add(filters);

    boolean present_sorts = true && (isSetSorts());
    list.add(present_sorts);
    if (present_sorts)
      list.add(sorts);

    return list.hashCode();
  }

  @Override
  public int compareTo(Request other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDimensions()).compareTo(other.isSetDimensions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDimensions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dimensions, other.dimensions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetrics()).compareTo(other.isSetMetrics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetrics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metrics, other.metrics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilters()).compareTo(other.isSetFilters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filters, other.filters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSorts()).compareTo(other.isSetSorts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSorts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sorts, other.sorts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Request(");
    boolean first = true;

    sb.append("dimensions:");
    if (this.dimensions == null) {
      sb.append("null");
    } else {
      sb.append(this.dimensions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metrics:");
    if (this.metrics == null) {
      sb.append("null");
    } else {
      sb.append(this.metrics);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filters:");
    if (this.filters == null) {
      sb.append("null");
    } else {
      sb.append(this.filters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sorts:");
    if (this.sorts == null) {
      sb.append("null");
    } else {
      sb.append(this.sorts);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequestStandardSchemeFactory implements SchemeFactory {
    public RequestStandardScheme getScheme() {
      return new RequestStandardScheme();
    }
  }

  private static class RequestStandardScheme extends StandardScheme<Request> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Request struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DIMENSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                struct.dimensions = new ArrayList<String>(_list28.size);
                String _elem29;
                for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                {
                  _elem29 = iprot.readString();
                  struct.dimensions.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setDimensionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // METRICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list31 = iprot.readListBegin();
                struct.metrics = new ArrayList<String>(_list31.size);
                String _elem32;
                for (int _i33 = 0; _i33 < _list31.size; ++_i33)
                {
                  _elem32 = iprot.readString();
                  struct.metrics.add(_elem32);
                }
                iprot.readListEnd();
              }
              struct.setMetricsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                struct.filters = new ArrayList<DimensionFilter>(_list34.size);
                DimensionFilter _elem35;
                for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                {
                  _elem35 = new DimensionFilter();
                  _elem35.read(iprot);
                  struct.filters.add(_elem35);
                }
                iprot.readListEnd();
              }
              struct.setFiltersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SORTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list37 = iprot.readListBegin();
                struct.sorts = new ArrayList<Sort>(_list37.size);
                Sort _elem38;
                for (int _i39 = 0; _i39 < _list37.size; ++_i39)
                {
                  _elem38 = new Sort();
                  _elem38.read(iprot);
                  struct.sorts.add(_elem38);
                }
                iprot.readListEnd();
              }
              struct.setSortsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Request struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dimensions != null) {
        oprot.writeFieldBegin(DIMENSIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.dimensions.size()));
          for (String _iter40 : struct.dimensions)
          {
            oprot.writeString(_iter40);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.metrics != null) {
        oprot.writeFieldBegin(METRICS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.metrics.size()));
          for (String _iter41 : struct.metrics)
          {
            oprot.writeString(_iter41);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.filters != null) {
        oprot.writeFieldBegin(FILTERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.filters.size()));
          for (DimensionFilter _iter42 : struct.filters)
          {
            _iter42.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sorts != null) {
        oprot.writeFieldBegin(SORTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sorts.size()));
          for (Sort _iter43 : struct.sorts)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequestTupleSchemeFactory implements SchemeFactory {
    public RequestTupleScheme getScheme() {
      return new RequestTupleScheme();
    }
  }

  private static class RequestTupleScheme extends TupleScheme<Request> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDimensions()) {
        optionals.set(0);
      }
      if (struct.isSetMetrics()) {
        optionals.set(1);
      }
      if (struct.isSetFilters()) {
        optionals.set(2);
      }
      if (struct.isSetSorts()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetDimensions()) {
        {
          oprot.writeI32(struct.dimensions.size());
          for (String _iter44 : struct.dimensions)
          {
            oprot.writeString(_iter44);
          }
        }
      }
      if (struct.isSetMetrics()) {
        {
          oprot.writeI32(struct.metrics.size());
          for (String _iter45 : struct.metrics)
          {
            oprot.writeString(_iter45);
          }
        }
      }
      if (struct.isSetFilters()) {
        {
          oprot.writeI32(struct.filters.size());
          for (DimensionFilter _iter46 : struct.filters)
          {
            _iter46.write(oprot);
          }
        }
      }
      if (struct.isSetSorts()) {
        {
          oprot.writeI32(struct.sorts.size());
          for (Sort _iter47 : struct.sorts)
          {
            _iter47.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Request struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list48 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.dimensions = new ArrayList<String>(_list48.size);
          String _elem49;
          for (int _i50 = 0; _i50 < _list48.size; ++_i50)
          {
            _elem49 = iprot.readString();
            struct.dimensions.add(_elem49);
          }
        }
        struct.setDimensionsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list51 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.metrics = new ArrayList<String>(_list51.size);
          String _elem52;
          for (int _i53 = 0; _i53 < _list51.size; ++_i53)
          {
            _elem52 = iprot.readString();
            struct.metrics.add(_elem52);
          }
        }
        struct.setMetricsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list54 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.filters = new ArrayList<DimensionFilter>(_list54.size);
          DimensionFilter _elem55;
          for (int _i56 = 0; _i56 < _list54.size; ++_i56)
          {
            _elem55 = new DimensionFilter();
            _elem55.read(iprot);
            struct.filters.add(_elem55);
          }
        }
        struct.setFiltersIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sorts = new ArrayList<Sort>(_list57.size);
          Sort _elem58;
          for (int _i59 = 0; _i59 < _list57.size; ++_i59)
          {
            _elem58 = new Sort();
            _elem58.read(iprot);
            struct.sorts.add(_elem58);
          }
        }
        struct.setSortsIsSet(true);
      }
    }
  }

}

