#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'awesome_types'

module AwesomeService
  class Client
    include ::Thrift::Client

    def getData(request)
      send_getData(request)
      return recv_getData()
    end

    def send_getData(request)
      send_message('getData', GetData_args, :request => request)
    end

    def recv_getData()
      result = receive_message(GetData_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getData failed: unknown result')
    end

    def reset()
      send_reset()
      recv_reset()
    end

    def send_reset()
      send_message('reset', Reset_args)
    end

    def recv_reset()
      result = receive_message(Reset_result)
      return
    end

    def ping()
      send_ping()
      return recv_ping()
    end

    def send_ping()
      send_message('ping', Ping_args)
    end

    def recv_ping()
      result = receive_message(Ping_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ping failed: unknown result')
    end

    def handleMapReduceResult(name, data)
      send_handleMapReduceResult(name, data)
      recv_handleMapReduceResult()
    end

    def send_handleMapReduceResult(name, data)
      send_message('handleMapReduceResult', HandleMapReduceResult_args, :name => name, :data => data)
    end

    def recv_handleMapReduceResult()
      result = receive_message(HandleMapReduceResult_result)
      return
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_getData(seqid, iprot, oprot)
      args = read_args(iprot, GetData_args)
      result = GetData_result.new()
      result.success = @handler.getData(args.request)
      write_result(result, oprot, 'getData', seqid)
    end

    def process_reset(seqid, iprot, oprot)
      args = read_args(iprot, Reset_args)
      result = Reset_result.new()
      @handler.reset()
      write_result(result, oprot, 'reset', seqid)
    end

    def process_ping(seqid, iprot, oprot)
      args = read_args(iprot, Ping_args)
      result = Ping_result.new()
      result.success = @handler.ping()
      write_result(result, oprot, 'ping', seqid)
    end

    def process_handleMapReduceResult(seqid, iprot, oprot)
      args = read_args(iprot, HandleMapReduceResult_args)
      result = HandleMapReduceResult_result.new()
      @handler.handleMapReduceResult(args.name, args.data)
      write_result(result, oprot, 'handleMapReduceResult', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class GetData_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::Request}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetData_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Response}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Reset_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Reset_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Ping_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Ping_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class HandleMapReduceResult_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NAME = 1
    DATA = 2

    FIELDS = {
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
      DATA => {:type => ::Thrift::Types::STRING, :name => 'data', :binary => true}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class HandleMapReduceResult_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

