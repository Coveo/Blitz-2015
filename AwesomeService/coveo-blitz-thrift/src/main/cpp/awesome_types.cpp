/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "awesome_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kOrderingTypeValues[] = {
  OrderingType::ASCENDING,
  OrderingType::DESCENDING
};
const char* _kOrderingTypeNames[] = {
  "ASCENDING",
  "DESCENDING"
};
const std::map<int, const char*> _OrderingType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kOrderingTypeValues, _kOrderingTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


DataPoint::~DataPoint() throw() {
}


void DataPoint::__set_dimensions(const std::map<std::string, std::string> & val) {
  this->dimensions = val;
}

void DataPoint::__set_metrics(const std::map<std::string, int64_t> & val) {
  this->metrics = val;
}

const char* DataPoint::ascii_fingerprint = "9AA6D4AA6B2F78AA4BA9F62B5619697C";
const uint8_t DataPoint::binary_fingerprint[16] = {0x9A,0xA6,0xD4,0xAA,0x6B,0x2F,0x78,0xAA,0x4B,0xA9,0xF6,0x2B,0x56,0x19,0x69,0x7C};

uint32_t DataPoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->dimensions.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _ktype1;
            ::apache::thrift::protocol::TType _vtype2;
            xfer += iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              std::string& _val6 = this->dimensions[_key5];
              xfer += iprot->readString(_val6);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.dimensions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->metrics.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _ktype8;
            ::apache::thrift::protocol::TType _vtype9;
            xfer += iprot->readMapBegin(_ktype8, _vtype9, _size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              std::string _key12;
              xfer += iprot->readString(_key12);
              int64_t& _val13 = this->metrics[_key12];
              xfer += iprot->readI64(_val13);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.metrics = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DataPoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DataPoint");

  xfer += oprot->writeFieldBegin("dimensions", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->dimensions.size()));
    std::map<std::string, std::string> ::const_iterator _iter14;
    for (_iter14 = this->dimensions.begin(); _iter14 != this->dimensions.end(); ++_iter14)
    {
      xfer += oprot->writeString(_iter14->first);
      xfer += oprot->writeString(_iter14->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("metrics", ::apache::thrift::protocol::T_MAP, 2);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->metrics.size()));
    std::map<std::string, int64_t> ::const_iterator _iter15;
    for (_iter15 = this->metrics.begin(); _iter15 != this->metrics.end(); ++_iter15)
    {
      xfer += oprot->writeString(_iter15->first);
      xfer += oprot->writeI64(_iter15->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DataPoint &a, DataPoint &b) {
  using ::std::swap;
  swap(a.dimensions, b.dimensions);
  swap(a.metrics, b.metrics);
  swap(a.__isset, b.__isset);
}

DataPoint::DataPoint(const DataPoint& other16) {
  dimensions = other16.dimensions;
  metrics = other16.metrics;
  __isset = other16.__isset;
}
DataPoint& DataPoint::operator=(const DataPoint& other17) {
  dimensions = other17.dimensions;
  metrics = other17.metrics;
  __isset = other17.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DataPoint& obj) {
  using apache::thrift::to_string;
  out << "DataPoint(";
  out << "dimensions=" << to_string(obj.dimensions);
  out << ", " << "metrics=" << to_string(obj.metrics);
  out << ")";
  return out;
}


DimensionFilter::~DimensionFilter() throw() {
}


void DimensionFilter::__set_dimension(const std::string& val) {
  this->dimension = val;
}

void DimensionFilter::__set_value(const std::string& val) {
  this->value = val;
}

const char* DimensionFilter::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t DimensionFilter::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t DimensionFilter::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dimension);
          this->__isset.dimension = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DimensionFilter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("DimensionFilter");

  xfer += oprot->writeFieldBegin("dimension", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dimension);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(DimensionFilter &a, DimensionFilter &b) {
  using ::std::swap;
  swap(a.dimension, b.dimension);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

DimensionFilter::DimensionFilter(const DimensionFilter& other18) {
  dimension = other18.dimension;
  value = other18.value;
  __isset = other18.__isset;
}
DimensionFilter& DimensionFilter::operator=(const DimensionFilter& other19) {
  dimension = other19.dimension;
  value = other19.value;
  __isset = other19.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const DimensionFilter& obj) {
  using apache::thrift::to_string;
  out << "DimensionFilter(";
  out << "dimension=" << to_string(obj.dimension);
  out << ", " << "value=" << to_string(obj.value);
  out << ")";
  return out;
}


Response::~Response() throw() {
}


void Response::__set_data(const std::vector<DataPoint> & val) {
  this->data = val;
}

const char* Response::ascii_fingerprint = "ECDFC2B0270189E06C6A8D9AF2F2E3E4";
const uint8_t Response::binary_fingerprint[16] = {0xEC,0xDF,0xC2,0xB0,0x27,0x01,0x89,0xE0,0x6C,0x6A,0x8D,0x9A,0xF2,0xF2,0xE3,0xE4};

uint32_t Response::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->data.clear();
            uint32_t _size20;
            ::apache::thrift::protocol::TType _etype23;
            xfer += iprot->readListBegin(_etype23, _size20);
            this->data.resize(_size20);
            uint32_t _i24;
            for (_i24 = 0; _i24 < _size20; ++_i24)
            {
              xfer += this->data[_i24].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Response::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Response");

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->data.size()));
    std::vector<DataPoint> ::const_iterator _iter25;
    for (_iter25 = this->data.begin(); _iter25 != this->data.end(); ++_iter25)
    {
      xfer += (*_iter25).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Response &a, Response &b) {
  using ::std::swap;
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

Response::Response(const Response& other26) {
  data = other26.data;
  __isset = other26.__isset;
}
Response& Response::operator=(const Response& other27) {
  data = other27.data;
  __isset = other27.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Response& obj) {
  using apache::thrift::to_string;
  out << "Response(";
  out << "data=" << to_string(obj.data);
  out << ")";
  return out;
}


Sort::~Sort() throw() {
}


void Sort::__set_dimension(const std::string& val) {
  this->dimension = val;
}

void Sort::__set_metric(const std::string& val) {
  this->metric = val;
}

void Sort::__set_ordering(const OrderingType::type val) {
  this->ordering = val;
}

const char* Sort::ascii_fingerprint = "4F8ABE747D9A2DF14F7E84DDBE60D55C";
const uint8_t Sort::binary_fingerprint[16] = {0x4F,0x8A,0xBE,0x74,0x7D,0x9A,0x2D,0xF1,0x4F,0x7E,0x84,0xDD,0xBE,0x60,0xD5,0x5C};

uint32_t Sort::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dimension);
          this->__isset.dimension = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->metric);
          this->__isset.metric = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast28;
          xfer += iprot->readI32(ecast28);
          this->ordering = (OrderingType::type)ecast28;
          this->__isset.ordering = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Sort::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Sort");

  xfer += oprot->writeFieldBegin("dimension", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dimension);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("metric", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->metric);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ordering", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((int32_t)this->ordering);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Sort &a, Sort &b) {
  using ::std::swap;
  swap(a.dimension, b.dimension);
  swap(a.metric, b.metric);
  swap(a.ordering, b.ordering);
  swap(a.__isset, b.__isset);
}

Sort::Sort(const Sort& other29) {
  dimension = other29.dimension;
  metric = other29.metric;
  ordering = other29.ordering;
  __isset = other29.__isset;
}
Sort& Sort::operator=(const Sort& other30) {
  dimension = other30.dimension;
  metric = other30.metric;
  ordering = other30.ordering;
  __isset = other30.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Sort& obj) {
  using apache::thrift::to_string;
  out << "Sort(";
  out << "dimension=" << to_string(obj.dimension);
  out << ", " << "metric=" << to_string(obj.metric);
  out << ", " << "ordering=" << to_string(obj.ordering);
  out << ")";
  return out;
}


Request::~Request() throw() {
}


void Request::__set_dimensions(const std::vector<std::string> & val) {
  this->dimensions = val;
}

void Request::__set_metrics(const std::vector<std::string> & val) {
  this->metrics = val;
}

void Request::__set_filters(const std::vector<DimensionFilter> & val) {
  this->filters = val;
}

void Request::__set_sorts(const std::vector<Sort> & val) {
  this->sorts = val;
}

const char* Request::ascii_fingerprint = "23100ABD54F353E26F08A012D6EA0C67";
const uint8_t Request::binary_fingerprint[16] = {0x23,0x10,0x0A,0xBD,0x54,0xF3,0x53,0xE2,0x6F,0x08,0xA0,0x12,0xD6,0xEA,0x0C,0x67};

uint32_t Request::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->dimensions.clear();
            uint32_t _size31;
            ::apache::thrift::protocol::TType _etype34;
            xfer += iprot->readListBegin(_etype34, _size31);
            this->dimensions.resize(_size31);
            uint32_t _i35;
            for (_i35 = 0; _i35 < _size31; ++_i35)
            {
              xfer += iprot->readString(this->dimensions[_i35]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.dimensions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->metrics.clear();
            uint32_t _size36;
            ::apache::thrift::protocol::TType _etype39;
            xfer += iprot->readListBegin(_etype39, _size36);
            this->metrics.resize(_size36);
            uint32_t _i40;
            for (_i40 = 0; _i40 < _size36; ++_i40)
            {
              xfer += iprot->readString(this->metrics[_i40]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.metrics = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->filters.clear();
            uint32_t _size41;
            ::apache::thrift::protocol::TType _etype44;
            xfer += iprot->readListBegin(_etype44, _size41);
            this->filters.resize(_size41);
            uint32_t _i45;
            for (_i45 = 0; _i45 < _size41; ++_i45)
            {
              xfer += this->filters[_i45].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.filters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sorts.clear();
            uint32_t _size46;
            ::apache::thrift::protocol::TType _etype49;
            xfer += iprot->readListBegin(_etype49, _size46);
            this->sorts.resize(_size46);
            uint32_t _i50;
            for (_i50 = 0; _i50 < _size46; ++_i50)
            {
              xfer += this->sorts[_i50].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sorts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Request");

  xfer += oprot->writeFieldBegin("dimensions", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->dimensions.size()));
    std::vector<std::string> ::const_iterator _iter51;
    for (_iter51 = this->dimensions.begin(); _iter51 != this->dimensions.end(); ++_iter51)
    {
      xfer += oprot->writeString((*_iter51));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("metrics", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->metrics.size()));
    std::vector<std::string> ::const_iterator _iter52;
    for (_iter52 = this->metrics.begin(); _iter52 != this->metrics.end(); ++_iter52)
    {
      xfer += oprot->writeString((*_iter52));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("filters", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->filters.size()));
    std::vector<DimensionFilter> ::const_iterator _iter53;
    for (_iter53 = this->filters.begin(); _iter53 != this->filters.end(); ++_iter53)
    {
      xfer += (*_iter53).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sorts", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sorts.size()));
    std::vector<Sort> ::const_iterator _iter54;
    for (_iter54 = this->sorts.begin(); _iter54 != this->sorts.end(); ++_iter54)
    {
      xfer += (*_iter54).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Request &a, Request &b) {
  using ::std::swap;
  swap(a.dimensions, b.dimensions);
  swap(a.metrics, b.metrics);
  swap(a.filters, b.filters);
  swap(a.sorts, b.sorts);
  swap(a.__isset, b.__isset);
}

Request::Request(const Request& other55) {
  dimensions = other55.dimensions;
  metrics = other55.metrics;
  filters = other55.filters;
  sorts = other55.sorts;
  __isset = other55.__isset;
}
Request& Request::operator=(const Request& other56) {
  dimensions = other56.dimensions;
  metrics = other56.metrics;
  filters = other56.filters;
  sorts = other56.sorts;
  __isset = other56.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Request& obj) {
  using apache::thrift::to_string;
  out << "Request(";
  out << "dimensions=" << to_string(obj.dimensions);
  out << ", " << "metrics=" << to_string(obj.metrics);
  out << ", " << "filters=" << to_string(obj.filters);
  out << ", " << "sorts=" << to_string(obj.sorts);
  out << ")";
  return out;
}


