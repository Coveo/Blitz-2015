/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef awesome_TYPES_H
#define awesome_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




struct OrderingType {
  enum type {
    ASCENDING = 1,
    DESCENDING = 2
  };
};

extern const std::map<int, const char*> _OrderingType_VALUES_TO_NAMES;

class DataPoint;

class DimensionFilter;

class Response;

class Sort;

class Request;

typedef struct _DataPoint__isset {
  _DataPoint__isset() : dimensions(false), metrics(false) {}
  bool dimensions :1;
  bool metrics :1;
} _DataPoint__isset;

class DataPoint {
 public:

  static const char* ascii_fingerprint; // = "9AA6D4AA6B2F78AA4BA9F62B5619697C";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0xA6,0xD4,0xAA,0x6B,0x2F,0x78,0xAA,0x4B,0xA9,0xF6,0x2B,0x56,0x19,0x69,0x7C};

  DataPoint(const DataPoint&);
  DataPoint& operator=(const DataPoint&);
  DataPoint() {
  }

  virtual ~DataPoint() throw();
  std::map<std::string, std::string>  dimensions;
  std::map<std::string, int64_t>  metrics;

  _DataPoint__isset __isset;

  void __set_dimensions(const std::map<std::string, std::string> & val);

  void __set_metrics(const std::map<std::string, int64_t> & val);

  bool operator == (const DataPoint & rhs) const
  {
    if (!(dimensions == rhs.dimensions))
      return false;
    if (!(metrics == rhs.metrics))
      return false;
    return true;
  }
  bool operator != (const DataPoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataPoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DataPoint& obj);
};

void swap(DataPoint &a, DataPoint &b);

typedef struct _DimensionFilter__isset {
  _DimensionFilter__isset() : dimension(false), value(false) {}
  bool dimension :1;
  bool value :1;
} _DimensionFilter__isset;

class DimensionFilter {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  DimensionFilter(const DimensionFilter&);
  DimensionFilter& operator=(const DimensionFilter&);
  DimensionFilter() : dimension(), value() {
  }

  virtual ~DimensionFilter() throw();
  std::string dimension;
  std::string value;

  _DimensionFilter__isset __isset;

  void __set_dimension(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const DimensionFilter & rhs) const
  {
    if (!(dimension == rhs.dimension))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const DimensionFilter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DimensionFilter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const DimensionFilter& obj);
};

void swap(DimensionFilter &a, DimensionFilter &b);

typedef struct _Response__isset {
  _Response__isset() : data(false) {}
  bool data :1;
} _Response__isset;

class Response {
 public:

  static const char* ascii_fingerprint; // = "ECDFC2B0270189E06C6A8D9AF2F2E3E4";
  static const uint8_t binary_fingerprint[16]; // = {0xEC,0xDF,0xC2,0xB0,0x27,0x01,0x89,0xE0,0x6C,0x6A,0x8D,0x9A,0xF2,0xF2,0xE3,0xE4};

  Response(const Response&);
  Response& operator=(const Response&);
  Response() {
  }

  virtual ~Response() throw();
  std::vector<DataPoint>  data;

  _Response__isset __isset;

  void __set_data(const std::vector<DataPoint> & val);

  bool operator == (const Response & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Response& obj);
};

void swap(Response &a, Response &b);

typedef struct _Sort__isset {
  _Sort__isset() : dimension(false), metric(false), ordering(false) {}
  bool dimension :1;
  bool metric :1;
  bool ordering :1;
} _Sort__isset;

class Sort {
 public:

  static const char* ascii_fingerprint; // = "4F8ABE747D9A2DF14F7E84DDBE60D55C";
  static const uint8_t binary_fingerprint[16]; // = {0x4F,0x8A,0xBE,0x74,0x7D,0x9A,0x2D,0xF1,0x4F,0x7E,0x84,0xDD,0xBE,0x60,0xD5,0x5C};

  Sort(const Sort&);
  Sort& operator=(const Sort&);
  Sort() : dimension(), metric(), ordering((OrderingType::type)0) {
  }

  virtual ~Sort() throw();
  std::string dimension;
  std::string metric;
  OrderingType::type ordering;

  _Sort__isset __isset;

  void __set_dimension(const std::string& val);

  void __set_metric(const std::string& val);

  void __set_ordering(const OrderingType::type val);

  bool operator == (const Sort & rhs) const
  {
    if (!(dimension == rhs.dimension))
      return false;
    if (!(metric == rhs.metric))
      return false;
    if (!(ordering == rhs.ordering))
      return false;
    return true;
  }
  bool operator != (const Sort &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Sort & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Sort& obj);
};

void swap(Sort &a, Sort &b);

typedef struct _Request__isset {
  _Request__isset() : dimensions(false), metrics(false), filters(false), sorts(false) {}
  bool dimensions :1;
  bool metrics :1;
  bool filters :1;
  bool sorts :1;
} _Request__isset;

class Request {
 public:

  static const char* ascii_fingerprint; // = "23100ABD54F353E26F08A012D6EA0C67";
  static const uint8_t binary_fingerprint[16]; // = {0x23,0x10,0x0A,0xBD,0x54,0xF3,0x53,0xE2,0x6F,0x08,0xA0,0x12,0xD6,0xEA,0x0C,0x67};

  Request(const Request&);
  Request& operator=(const Request&);
  Request() {
  }

  virtual ~Request() throw();
  std::vector<std::string>  dimensions;
  std::vector<std::string>  metrics;
  std::vector<DimensionFilter>  filters;
  std::vector<Sort>  sorts;

  _Request__isset __isset;

  void __set_dimensions(const std::vector<std::string> & val);

  void __set_metrics(const std::vector<std::string> & val);

  void __set_filters(const std::vector<DimensionFilter> & val);

  void __set_sorts(const std::vector<Sort> & val);

  bool operator == (const Request & rhs) const
  {
    if (!(dimensions == rhs.dimensions))
      return false;
    if (!(metrics == rhs.metrics))
      return false;
    if (!(filters == rhs.filters))
      return false;
    if (!(sorts == rhs.sorts))
      return false;
    return true;
  }
  bool operator != (const Request &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Request & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Request& obj);
};

void swap(Request &a, Request &b);



#endif
